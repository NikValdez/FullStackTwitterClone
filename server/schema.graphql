### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

type Comment {
  content: String
  createdAt: DateTime!
  id: Int!
}

input CommentWhereUniqueInput {
  id: Int
}

scalar DateTime

type LikedTweet {
  id: Int!
  likedAt: DateTime!
  tweet: Tweet!
}

input LikedTweetWhereUniqueInput {
  id: Int
}

type Mutation {
  createComment(content: String!, id: Int!): Comment
  createProfile(avatar: String, bio: String, location: String, website: String): Profile
  createTweet(content: String): Tweet
  deleteLike(id: Int!): LikedTweet
  likeTweet(id: Int): LikedTweet
  login(email: String!, password: String!): AuthPayload
  signup(email: String!, name: String, password: String!): AuthPayload
  updateProfile(avatar: String, bio: String, id: Int, location: String, website: String): Profile
}

type Profile {
  avatar: String
  bio: String
  id: Int!
  location: String
  website: String
}

type Query {
  me: User
  tweet(id: Int): Tweet
  tweets: [Tweet]
  users: [User]
}

type Tweet {
  author: User
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  content: String
  createdAt: DateTime!
  id: Int!
  likes(after: LikedTweetWhereUniqueInput, before: LikedTweetWhereUniqueInput, first: Int, last: Int): [LikedTweet!]!
}

type User {
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  email: String!
  id: Int!
  likedTweet(after: LikedTweetWhereUniqueInput, before: LikedTweetWhereUniqueInput, first: Int, last: Int): [LikedTweet!]!
  name: String
  Profile: Profile
  tweets: [Tweet!]!
}
