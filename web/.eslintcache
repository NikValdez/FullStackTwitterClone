[{"/Users/nikolascochran/Desktop/twitter-clone/web/src/App.tsx":"1","/Users/nikolascochran/Desktop/twitter-clone/web/src/pages/Signup.tsx":"2","/Users/nikolascochran/Desktop/twitter-clone/web/src/pages/Login.tsx":"3","/Users/nikolascochran/Desktop/twitter-clone/web/src/components/Landing.tsx":"4","/Users/nikolascochran/Desktop/twitter-clone/web/src/components/IsAuthenticated.tsx":"5","/Users/nikolascochran/Desktop/twitter-clone/web/src/pages/Profile.tsx":"6","/Users/nikolascochran/Desktop/twitter-clone/web/src/styles/CustomModalStyles.ts":"7","/Users/nikolascochran/Desktop/twitter-clone/web/src/components/CreateProfile.tsx":"8","/Users/nikolascochran/Desktop/twitter-clone/web/src/components/UpdateProfile.tsx":"9"},{"size":1553,"mtime":1607382789716,"results":"10","hashOfConfig":"11"},{"size":2780,"mtime":1606782410196,"results":"12","hashOfConfig":"11"},{"size":2141,"mtime":1606782384076,"results":"13","hashOfConfig":"11"},{"size":1633,"mtime":1606782288422,"results":"14","hashOfConfig":"11"},{"size":603,"mtime":1606084351597,"results":"15","hashOfConfig":"11"},{"size":844,"mtime":1607385480272,"results":"16","hashOfConfig":"11"},{"size":387,"mtime":1607384401845,"results":"17","hashOfConfig":"11"},{"size":2339,"mtime":1607384997135,"results":"18","hashOfConfig":"11"},{"size":2635,"mtime":1607385431904,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3habhz",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nikolascochran/Desktop/twitter-clone/web/src/App.tsx",[],"/Users/nikolascochran/Desktop/twitter-clone/web/src/pages/Signup.tsx",["40"],"import { gql, useMutation } from \"@apollo/client\"\nimport { ErrorMessage, Field, Form, Formik } from \"formik\"\nimport React from \"react\"\nimport { Link, useHistory } from \"react-router-dom\"\nimport * as Yup from \"yup\"\nimport TwitterLogo from \"../styles/assets/twitter-logo.png\"\n\nconst SIGNUP_MUTATION = gql`\n  mutation signup($name: String, $email: String!, $password: String!) {\n    signup(name: $name, email: $email, password: $password) {\n      token\n    }\n  }\n`\n\ninterface SignupValues {\n  email: string\n  password: string\n  confirmPassword: string\n  name: string\n}\n\nfunction Signup() {\n  const history = useHistory()\n  const [signup, { data }] = useMutation(SIGNUP_MUTATION)\n\n  const initialValues: SignupValues = {\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    name: \"\",\n  }\n\n  const validationSchema = Yup.object({\n    email: Yup.string()\n      .email(\"Invalid email address\")\n      .required(\"Email Required\"),\n    password: Yup.string()\n      .max(20, \"Must be 20 characters or less\")\n      .required(\"Password Required\"),\n    confirmPassword: Yup.string().oneOf(\n      [Yup.ref(\"password\")],\n      \"Passwords must match\"\n    ),\n    name: Yup.string()\n      .max(15, \"Must be 15 characters or less\")\n      .required(\"Name Required\"),\n  })\n\n  return (\n    <div className=\"container\">\n      <img\n        src={TwitterLogo}\n        alt=\"logo\"\n        style={{ width: \"50px\" }}\n        className=\"logo\"\n      />\n      <h3>Sign up</h3>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={async (values, { setSubmitting }) => {\n          setSubmitting(true)\n          const response = await signup({\n            variables: values,\n          })\n          localStorage.setItem(\"token\", response.data.signup.token)\n          setSubmitting(false)\n          history.push(\"/users\")\n        }}\n      >\n        <Form>\n          <Field name=\"email\" type=\"text\" placeholder=\"Email\" />\n          <ErrorMessage name=\"email\" component={\"div\"} />\n          <Field name=\"name\" type=\"text\" placeholder=\"Name\" />\n          <ErrorMessage name=\"name\" component={\"div\"} />\n          <Field name=\"password\" type=\"password\" placeholder=\"Password\" />\n          <ErrorMessage name=\"password\" component={\"div\"} />\n          <Field\n            name=\"confirmPassword\"\n            type=\"password\"\n            placeholder=\"Confirm Password\"\n          />\n          <ErrorMessage name=\"confirmPassword\" component={\"div\"} />\n          <button type=\"submit\" className=\"login-button\">\n            <span>Sign up</span>\n          </button>\n        </Form>\n      </Formik>\n      <div className=\"register\">\n        <h4>Already have an account?</h4>\n        <Link to=\"/login\">Log in</Link>\n      </div>\n    </div>\n  )\n}\n\nexport default Signup\n","/Users/nikolascochran/Desktop/twitter-clone/web/src/pages/Login.tsx",["41"],"import { gql, useMutation } from \"@apollo/client\"\nimport { ErrorMessage, Field, Form, Formik } from \"formik\"\nimport React from \"react\"\nimport { Link, useHistory } from \"react-router-dom\"\nimport * as Yup from \"yup\"\nimport TwitterLogo from \"../styles/assets/twitter-logo.png\"\n\nconst LOGIN_MUTATION = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n    }\n  }\n`\n\ninterface LoginValues {\n  email: string\n  password: string\n}\n\nfunction Login() {\n  const history = useHistory()\n  const [login, { data }] = useMutation(LOGIN_MUTATION)\n\n  const initialValues: LoginValues = {\n    email: \"\",\n    password: \"\",\n  }\n\n  const validationSchema = Yup.object({\n    email: Yup.string()\n      .email(\"Invalid email address\")\n      .required(\"Email Required\"),\n    password: Yup.string()\n      .max(20, \"Must be 20 characters or less\")\n      .required(\"Password Required\"),\n  })\n\n  return (\n    <div className=\"container\">\n      <img\n        src={TwitterLogo}\n        alt=\"logo\"\n        style={{ width: \"50px\" }}\n        className=\"logo\"\n      />\n      <h3>Log in to Fake Twitter</h3>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={async (values, { setSubmitting }) => {\n          setSubmitting(true)\n          const response = await login({\n            variables: values,\n          })\n          localStorage.setItem(\"token\", response.data.login.token)\n          setSubmitting(false)\n          history.push(\"/users\")\n        }}\n      >\n        <Form>\n          <Field name=\"email\" type=\"text\" placeholder=\"Email\" />\n          <ErrorMessage name=\"email\" component={\"div\"} />\n\n          <Field name=\"password\" type=\"password\" placeholder=\"Password\" />\n          <ErrorMessage name=\"password\" component={\"div\"} />\n\n          <button type=\"submit\" className=\"login-button\">\n            <span>Login</span>\n          </button>\n        </Form>\n      </Formik>\n      <div className=\"register\">\n        <h4>Don't have an account?</h4>\n        <Link to=\"/signup\">Sign up</Link>\n      </div>\n    </div>\n  )\n}\n\nexport default Login\n","/Users/nikolascochran/Desktop/twitter-clone/web/src/components/Landing.tsx",[],"/Users/nikolascochran/Desktop/twitter-clone/web/src/components/IsAuthenticated.tsx",[],"/Users/nikolascochran/Desktop/twitter-clone/web/src/pages/Profile.tsx",[],"/Users/nikolascochran/Desktop/twitter-clone/web/src/styles/CustomModalStyles.ts",[],"/Users/nikolascochran/Desktop/twitter-clone/web/src/components/CreateProfile.tsx",[],"/Users/nikolascochran/Desktop/twitter-clone/web/src/components/UpdateProfile.tsx",[],{"ruleId":"42","severity":1,"message":"43","line":25,"column":20,"nodeType":"44","messageId":"45","endLine":25,"endColumn":24},{"ruleId":"42","severity":1,"message":"43","line":23,"column":19,"nodeType":"44","messageId":"45","endLine":23,"endColumn":23},"@typescript-eslint/no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar"]